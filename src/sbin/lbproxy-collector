#!/usr/bin/python3.4

#
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
#
#        http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.
#
# @author: Juliano Martinez (ncode)
# @author: Dan Achim (dan@hostatic.ro)

import os
import datetime
import f5
import logging
import sys
import socket
import time
import traceback

from f5.exceptions import UnsupportedF5Version
from lbproxy.utils import (
    config, get_logger, get_redis
)
from lbproxy import cache

logger = get_logger()
ttl = config.get('lbproxyd', 'redis_ttl')


def populate_cache(device):
    started = datetime.datetime.now()
    collect_data(device)
    finished = datetime.datetime.now()
    spent = finished - started
    logger.info('Finished collecting {} in {} seconds'.format(
        device, spent.total_seconds()
    ))
    r = get_redis(write=True)
    r.set('beam::lbproxy::cache_warm', spent.total_seconds())
    r.set('beam::lbproxy::last_update', time.mktime(finished.timetuple()))


def collect_data(device):
    try:
        """Collect all data to be cached"""
        username = config.get('f5', 'collect_username')
        password = config.get('f5', 'collect_password')
        r = get_redis(write=True)
        partitions = None
        pools = None
        lb = None
        try:
            logger.info('Retrieving data from to %s' % device)

            lb = f5.Lb(device, username, password)
            failover_state = lb.failover_state
            pools = [pool.name for pool in lb.pools_get()]
            partitions = ['/%s' % pool.split('/')[1] for pool in pools]
            
            for pool in pools:
                poolmembers = [
                    (poolmember.node.name, poolmember._port, poolmember._enabled)
                        for poolmember in lb.pms_get(pool)
                ]
                logger.debug('Caching poolmembers data from %s' % device)
                cache.poolmembers(device, pool, poolmembers, failover_state)
                del poolmembers

            logger.debug('Caching pools from %s' % device)
            cache.pools(device, pools)

            logger.debug('Caching partitions data from %s' % device)
            cache.partitions(device, partitions)

            logger.debug('Caching virtualservers data from %s' % device)
            cache_virtualserver(device, lb.vss_get())

            logger.debug('Caching the failover state of %s' % device)
            r.set('device::failover_state::' + device, failover_state)
            
        except UnsupportedF5Version as e:
            logger.error(
                'Unsupported F5 version %s on %s' % (e.version, device)
            )
        finally:
            del partitions
            del pools
            del lb
    except Exception as e:
        print( traceback.format_exc())
        logger.error('Problem collecting data from device {}: {}\n{}'.format(
            device, e, traceback.format_exc()
        ))
        return (device, False)
    return (device, True)


def cache_virtualserver(device, virtualservers):
    """Create and manage the cache namespaces for virtualservers"""
    r = get_redis(write=True)
    pipe = r.pipeline()
    nsd = 'device::virtualservers::%s' % device

    _vs = []
    for virtualserver in virtualservers:
        logger.debug('Caching data from virtualserver %s' % virtualserver.name)
        nsv = 'virtualserver::%s' % virtualserver.name
        nsvip = 'virtualserver::ip::%s::%s' % (device, virtualserver.name)
        pipe.sadd(nsd, virtualserver)
        pipe.sadd(nsv, device)
        pipe.set(nsvip, virtualserver._address)

    for virtualserver in (r.smembers(nsd) - set(_vs)):
        logger.debug('Cleaning data from virtualserver %s' % virtualserver)
        nsv = 'virtualserver::%s' % virtualserver
        nsvip = 'virtualserver::ip::%s::%s' % (device, virtualserver)
        pipe.srem(nsd, virtualserver)
        pipe.srem(nsv, device)
        pipe.delete(nsvip)

    pipe.execute()
    del _vs
    del virtualservers


if __name__ == '__main__':
    if not len(sys.argv) == 2:
        print("Usage {} <f5 device>".format(sys.argv[0]))
        sys.exit(1)

    device = sys.argv[1]
    try:
        socket.gethostbyname(device)
    except Exception as err:
        print("I couldn't find %s, please verify the dns entry.")
    populate_cache(device)
